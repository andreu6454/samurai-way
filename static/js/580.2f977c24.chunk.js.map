{"version":3,"file":"static/js/580.2f977c24.chunk.js","mappings":"0KACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA2G,0BAA3G,EAAoJ,8BAApJ,EAAqO,2B,UCArO,EAAyB,4BAAzB,EAAmG,4B,mBCuBnG,EAdoB,SAACA,GAEjB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,0BACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAcC,IAAKL,EAAMM,OAAQC,IAAK,YACtD,UAAC,KAAD,CAASC,GAAIP,EAAb,cAAsBD,EAAMS,KAA5B,WAIf,E,UCKD,EAnByB,WACrB,IAEMC,GAFcC,EAAAA,EAAAA,KAAqD,SAAAC,GAAK,OAAIA,EAAMC,aAAaC,WAAvB,IAElDC,KAAI,SAAAC,GAAM,OACjC,SAAC,EAAD,CAEGP,KAAMO,EAAOP,KACbP,GAAIc,EAAOd,GACXI,OAAQU,EAAOV,SAHVW,EAAAA,EAAAA,KAFyB,IAStC,OACI,gBAAKd,UAAWC,EAAhB,SACKM,GAGZ,E,8BCxBD,EAA0B,8BAA1B,EAAqE,iCAArE,EAAkH,gCAAlH,EAA8J,gCCqB9J,EAZqB,SAACV,GAClB,IAAIkB,EAGJ,OAFqBA,EAAJ,IAAjBlB,EAAMmB,OAAqBf,EAAsBA,GAG7C,iBAAKD,UAAWe,EAAhB,WACI,gBAAKb,IAAKL,EAAMoB,WAAYjB,UAAWC,EAAkBG,IAAK,YAC9D,gBAAKJ,UAAWC,EAAhB,SAAkCJ,EAAMqB,YAGnD,ECMD,EAnBiB,WACb,IAEMC,GAFcC,EAAAA,EAAAA,KAAuC,SAAAX,GAAK,OAAIA,EAAMC,aAAaW,WAAvB,IAEnCT,KAAI,SAAAM,GAAO,OACnC,SAAC,EAAD,CAEGA,QAASA,EAAQA,QACjBnB,GAAImB,EAAQnB,GACZiB,OAAQE,EAAQF,OAChBC,WAAYC,EAAQD,aAJfH,EAAAA,EAAAA,KAF2B,IASxC,OACI,gBAAKd,UAAWC,EAAhB,SACKkB,GAGZ,ECSD,EA1B0B,WACtB,IAAMG,GAAoBF,EAAAA,EAAAA,KAAuB,SAAAX,GAAK,OAAIA,EAAMC,aAAaW,YAAYE,MAAnC,IAChDC,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,UAAiB,IAA/C,eAAOR,EAAP,KAAgBS,EAAhB,KAIMC,EAAoB,WACH,KAAnBV,EAAQW,QAAiBL,GAASM,EAAAA,EAAAA,GAAaR,EAAoB,EAAEJ,EAAQW,SAC7EF,EAAW,GACd,EAID,OACI,iBAAK3B,UAAWC,EAAhB,WACI,SAAC,EAAD,KACA,iBAAKD,UAAWC,EAAhB,WACQ,qBAAU8B,SAdF,SAACC,GACrBL,EAAWK,EAAEC,cAAcC,MAC9B,EAYoDA,MAAOhB,EAASiB,YAAa,eACxDC,WARD,SAACJ,GACZ,UAAVA,EAAEK,KAAmBT,GACxB,KAOW,mBAAQU,QAASV,EAAjB,yBAIf,ECjBD,EAToB,WAChB,OACI,iBAAK5B,UAAWC,EAAhB,WACI,SAAC,EAAD,KACA,SAAC,EAAD,MAGX,C","sources":["webpack://samurai-way/./src/Pages/DialogsPage/Dialogs.module.css?0b7d","webpack://samurai-way/./src/Pages/DialogsPage/DialogsContainer/DialogsItem/DialogsItem.module.css?5584","Pages/DialogsPage/DialogsContainer/DialogsItem/DialogsItem.tsx","Pages/DialogsPage/DialogsContainer/DialogsContainer.tsx","webpack://samurai-way/./src/Pages/DialogsPage/MessagesContainer/Messages/MessagesItem/MessagesItem.module.css?0868","Pages/DialogsPage/MessagesContainer/Messages/MessagesItem/MessagesItem.tsx","Pages/DialogsPage/MessagesContainer/Messages/Messages.tsx","Pages/DialogsPage/MessagesContainer/MessagesContainer.tsx","Pages/DialogsPage/DialogsPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__CnAGU\",\"dialogsItems\":\"Dialogs_dialogsItems__WykWK\",\"messages\":\"Dialogs_messages__0z6mM\",\"messagesZone\":\"Dialogs_messagesZone__Gndyz\",\"myMessage\":\"Dialogs_myMessage__2bNyl\",\"InputZone\":\"Dialogs_InputZone__16vVi\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogsItem_dialog__aKIO7\",\"active\":\"DialogsItem_active__vOYyB\",\"avatar\":\"DialogsItem_avatar__P7E77\"};","import React from 'react';\nimport style from \"./DialogsItem.module.css\"\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogsPropsType = {\n    name: string;\n    id: number;\n    avatar: string\n}\n\nconst DialogsItem = (props: DialogsPropsType) => {\n\n    let path = \"/dialogs/\" + props.id\n\n    return (\n        <div>\n            <div className={style.dialog}>\n                <img className={style.avatar} src={props.avatar} alt={\"avatar\"}></img>\n                <NavLink to={path} > {props.name} </NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default DialogsItem;","import React from 'react';\nimport style from \"../Dialogs.module.css\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../Redux/ReduxState\";\nimport {DialogsDataType} from \"../../../Redux/Types\";\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\nimport {v1} from \"uuid\";\n\nconst DialogsContainer = () => {\n    const dialogsData = useSelector<AppRootStateType,Array<DialogsDataType>>(state => state.MessagesPage.DialogsData)\n\n    const Dialogs = dialogsData.map(dialog =>\n        (<DialogsItem\n            key={v1()}\n            name={dialog.name}\n            id={dialog.id}\n            avatar={dialog.avatar}\n        />)\n    )\n\n    return (\n        <div className={style.dialogsItems}>\n            {Dialogs}\n        </div>\n    );\n};\n\nexport default DialogsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"MessagesItem_message__XwZkQ\",\"userAvatar\":\"MessagesItem_userAvatar__aFkb1\",\"textBlock\":\"MessagesItem_textBlock__-+PA8\",\"myMessage\":\"MessagesItem_myMessage__Z-qhV\"};","import React from 'react';\nimport style from \"./MessagesItem.module.css\"\n\ntype MessagesItemType = {\n    id: number,\n    userId: number,\n    userAvatar: string,\n    message: string\n}\n\nconst MessagesItem = (props: MessagesItemType) => {\n    let tmp\n    props.userId === 1 ? tmp = style.message : tmp = style.myMessage\n\n    return (\n        <div className={tmp}>\n            <img src={props.userAvatar} className={style.userAvatar} alt={\"avatar\"}/>\n            <div className={style.textBlock}>{props.message}</div>\n        </div>\n    );\n};\n\nexport default MessagesItem;","import React from 'react';\nimport style from \"../../Dialogs.module.css\";\nimport MessagesItem from \"./MessagesItem/MessagesItem\";\nimport {useAppSelector} from \"../../../../Redux/ReduxState\";\nimport {MessageDataType} from \"../../../../Redux/Types\";\nimport {v1} from \"uuid\";\n\nconst Messages = () => {\n    const messageData = useAppSelector<Array<MessageDataType>>(state => state.MessagesPage.MessageData)\n\n    const Messages = messageData.map(message =>\n        (<MessagesItem\n            key={v1()}\n            message={message.message}\n            id={message.id}\n            userId={message.userId}\n            userAvatar={message.userAvatar}\n        />)\n    )\n    return (\n        <div className={style.messagesZone}>\n            {Messages}\n        </div>\n    );\n};\n\nexport default Messages;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport style from \"../Dialogs.module.css\";\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from \"../../../Redux/ReduxState\";\nimport {addMessageAC} from \"../../../Redux/Reducers/messagePageReducer\";\nimport Messages from \"./Messages/Messages\";\n\nconst MessagesContainer = () => {\n    const messageDataLength = useAppSelector<number>(state => state.MessagesPage.MessageData.length)\n    const dispatch = useDispatch()\n    const [message, setMessage] = useState<string>(\"\")\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        setMessage(e.currentTarget.value)\n    }\n    const onClickAddMessage = () => {\n        message.trim() !== \"\" && dispatch(addMessageAC(messageDataLength + 1,message.trim()))\n        setMessage(\"\")\n    }\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n        e.key === \"Enter\" && onClickAddMessage()\n    }\n    return (\n        <div className={style.messages}>\n            <Messages/>\n            <div className={style.InputZone}>\n                    <textarea onChange={onChangeHandler} value={message} placeholder={\"Your Message\"}\n                              onKeyPress={onKeyDownHandler}></textarea>\n                <button onClick={onClickAddMessage}> Send </button>\n            </div>\n        </div>\n    );\n};\n\nexport default MessagesContainer;","import React from 'react';\nimport style from './Dialogs.module.css'\nimport DialogsContainer from \"./DialogsContainer/DialogsContainer\";\nimport MessagesContainer from \"./MessagesContainer/MessagesContainer\";\n\nconst DialogsPage = () => {\n    return (\n        <div className={style.dialogs}>\n            <DialogsContainer/>\n            <MessagesContainer/>\n        </div>\n    );\n};\n\nexport default DialogsPage;"],"names":["props","path","id","className","style","src","avatar","alt","to","name","Dialogs","useSelector","state","MessagesPage","DialogsData","map","dialog","v1","tmp","userId","userAvatar","message","Messages","useAppSelector","MessageData","messageDataLength","length","dispatch","useDispatch","useState","setMessage","onClickAddMessage","trim","addMessageAC","onChange","e","currentTarget","value","placeholder","onKeyPress","key","onClick"],"sourceRoot":""}