{"version":3,"file":"static/js/31.e1e2dd91.chunk.js","mappings":"8OACA,EAA4B,6BAA5B,EAAiE,yBAAjE,EAAuG,8BAAvG,EAAkJ,8BAAlJ,EAAkM,mCAAlM,EAAoP,gCAApP,EAA+R,4BAA/R,EAAmU,yBAAnU,EAA0W,+BAA1W,EAAia,yCAAja,EAAkd,yB,SC+Fld,EAhFkB,WACd,OAAgDA,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAA7DC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,WAAYC,EAA3B,EAA2BA,kBACrBC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHH,GACCC,GAASG,EAAAA,EAAAA,MAEhB,GAAC,CAACJ,IAGH,OAKIK,EAAAA,EAAAA,IAAuB,CACvBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,MATbC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MACYC,EAJhB,EAIIC,UAAYD,QASCE,EAAAA,EAAAA,QAAO,CAAC,GAChBC,QAAUJ,EAAM,WAAY,IAMrC,OAAIf,GACO,SAAC,KAAD,CAAUoB,GAAIC,EAAAA,EAAAA,WAGrB,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,sBAGA,iBAAKD,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,2BAEI,oCACQV,EAAS,QAAS,CAACW,UAAU,KADrC,IAEIC,KAAM,QACNH,UAAWC,KACdP,EAAOP,QAAS,iBAAMa,UAAWC,EAAjB,gCAErB,iBAAKD,UAAWC,EAAhB,sBAEI,oCACQV,EAAS,WAAY,CAACW,UAAU,KADxC,IAEIC,KAAM,WACNH,UAAWC,KACdP,EAAON,WAAY,iBAAMY,UAAWC,EAAjB,mCAExB,iBAAKD,UAAWC,EAAhB,WACI,oCACQV,EAAS,eADjB,IAEIY,KAAM,WACNH,UAAWC,KAJnB,kBAOCtB,IACD,iBAAKqB,UAAWC,EAAhB,WACI,gBAAKG,IAAKzB,EAAY0B,IAAK,aAC3B,oCACQd,EAAS,UAAW,CAACW,UAAU,KADvC,IAEIF,UAAWC,KACdP,EAAOJ,UAAW,iBAAMU,UAAWC,EAAjB,kCAEvB,mBAAQE,KAAM,SAAUH,UAAWC,EAAmBK,QAASd,GA5C5B,SAAC,GAA2D,IAA1DL,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,QAC1ET,GAAS0B,EAAAA,EAAAA,IAAQ,CAACpB,MAAAA,EAAOC,SAAAA,EAAUC,WAAAA,EAAYC,QAAAA,IAClD,IA0CW,0BAEJ,iBAAKU,UAAWC,EAAhB,8BACoB,cAAGO,KAAM,8CAAT,qBADpB,SAKX,C","sources":["webpack://samurai-way/./src/Pages/LoginPage/LoginPage.module.css?3afe","Pages/LoginPage/LoginPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginPage\":\"LoginPage_loginPage__5CvHl\",\"title\":\"LoginPage_title__pqnvN\",\"loginBlock\":\"LoginPage_loginBlock__eRfSF\",\"inputBlock\":\"LoginPage_inputBlock__cLanR\",\"rememberMeBlock\":\"LoginPage_rememberMeBlock__zUAEk\",\"captchaBlock\":\"LoginPage_captchaBlock__o2nic\",\"checkBox\":\"LoginPage_checkBox__wGcCv\",\"Input\":\"LoginPage_Input__A+1X2\",\"LoginButton\":\"LoginPage_LoginButton__mS7V9\",\"registerRedirectBlock\":\"LoginPage_registerRedirectBlock__GSibd\",\"error\":\"LoginPage_error__NOrmk\"};","import React, {useEffect, useRef} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {SubmitHandler, useForm} from \"react-hook-form\";\nimport {getCaptchaTC, logInTC} from \"../../Redux/Reducers/authReducer\";\nimport {useAppSelector} from \"../../Redux/ReduxState\";\nimport {Navigate} from \"react-router-dom\";\nimport {appRoutes} from \"../../Routes/constants\";\nimport style from './LoginPage.module.css'\n\nexport interface LoginDataType {\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n}\n\nconst LoginPage = () => {\n    const {isAuth, captchaURL, isCaptchaRequired} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        if(isCaptchaRequired){\n            dispatch(getCaptchaTC())\n        }\n    },[isCaptchaRequired])\n\n\n    const {\n        register,\n        handleSubmit,\n        watch,\n        formState: {errors},\n    } = useForm<LoginDataType>({\n        defaultValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n            captcha: ''\n        },\n    });\n    const password = useRef({});\n    password.current = watch('password', '');\n\n    const onSubmit: SubmitHandler<LoginDataType> = ({email, password, rememberMe, captcha}: LoginDataType) => {\n        dispatch(logInTC({email, password, rememberMe, captcha}))\n    };\n\n    if (isAuth) {\n        return <Navigate to={appRoutes.PROFILE}/>\n    }\n    return (\n        <div className={style.loginPage}>\n            <div className={style.title}>\n                Sign in\n            </div>\n            <div className={style.loginBlock}>\n                <div className={style.inputBlock}>\n                    Email address\n                    <input\n                        {...register('email', {required: true})}\n                        type={'email'}\n                        className={style.Input}/>\n                    {errors.email && <span className={style.error}>Email required</span>}\n                </div>\n                <div className={style.inputBlock}>\n                    Password\n                    <input\n                        {...register('password', {required: true})}\n                        type={'password'}\n                        className={style.Input}/>\n                    {errors.password && <span className={style.error}>Password required</span>}\n                </div>\n                <div className={style.rememberMeBlock}>\n                    <input\n                        {...register('rememberMe')}\n                        type={'checkbox'}\n                        className={style.checkBox}/>\n                    Remember me?\n                </div>\n                {captchaURL &&\n                <div className={style.captchaBlock}>\n                    <img src={captchaURL} alt={'captcha'}/>\n                    <input\n                        {...register('captcha', {required: true})}\n                        className={style.Input}></input>\n                    {errors.captcha && <span className={style.error}>Captcha required</span>}\n                </div>}\n                <button type={'submit'} className={style.LoginButton} onClick={handleSubmit(onSubmit)}> Sign in</button>\n            </div>\n            <div className={style.registerRedirectBlock}>\n                No account yet? <a href={'https://social-network.samuraijs.com/signUp'}>Sign up</a>.\n            </div>\n        </div>\n    );\n};\n\nexport default LoginPage;"],"names":["useAppSelector","state","auth","isAuth","captchaURL","isCaptchaRequired","dispatch","useDispatch","useEffect","getCaptchaTC","useForm","defaultValues","email","password","rememberMe","captcha","register","handleSubmit","watch","errors","formState","useRef","current","to","appRoutes","className","style","required","type","src","alt","onClick","logInTC","href"],"sourceRoot":""}